plot(HARV_stack)
plotRGB(HARV_stack)
plotRGB(HARV_stack)
object.size(HARV_stack)
HARV_brick <- brick(HARV_stack)
object.size(HARV_brick)
# specify the grid topology with the following parameters:
# - the smallest coordinates for each dimension, here: 0,0
# - cell size in each dimension, here: 1,1
# - number of cells in each dimension, here: 5,5
gtopo <- GridTopology(cellcentre.offset = c(0,0),
cellsize = c(1,1),
cells.dim = c(5,5)) # create the grid
datafr <- data.frame(runif(25)) # make up some data
SpGdf <- SpatialGridDataFrame(gtopo, datafr) # create the grid data frame
summary(SpGdf)
plot(SpGdf)
plot(SpGdf, pch = 3)
coordinates(SpGdf)
coordinates(SpGdf) #coordinate會是grid的中心~
plot(SpGdf); points(coordinates(SpGdf), pch = 3)
coordinates(r) #coordinate會是grid的中心~
plot(r); points(coordinates(r), pch = 3)
coordinates(SpGdf) #coordinate會是grid的中心~
plot(SpGdf); points(coordinates(SpGdf), pch = 3)
plot(SpGdf)
coordinates(SpGdf) #coordinate會是grid的中心~
plot(SpGdf); points(coordinates(SpGdf), pch = 3)
ph_edu <- read.csv("../data/PhiladelphiaEduAttain.csv")
ph_edu <- read.csv("../data/PhillyEducation.csv")
names(ph_edu)
## sf ##
# if you need to read in again:
philly_sf <- st_read("../data/Philly")
names(philly_sf)
philly_sf_merged <- merge(x = philly_sf, y = ph_edu,
by.x = "GEOID10", by.y = "GEOID")
names(philly_sf_merged)
## sp ##
# if you need to read in again:
# philly_sp <- readOGR("data/Philly/", "PhillyTotalPopHHinc")
philly_sp %>% str
## sp ##
# if you need to read in again:
philly_sp <- readOGR(dsn = "../data/Philly/", layer = "PhillyTotalPopHHinc")
## sp ##
# if you need to read in again:
philly_sp <- readOGR(dsn = "../data/Philly", layer = "PhillyTotalPopHHinc")
# this is sp::merge()
philly_sp_merged <- sp::merge(philly_sp, ph_edu, by.x = "GEOID10", by.y = "GEOID")
names(philly_sp_merged) # no geometry column here
# if you need to read in again:
philly_sf <- st_read(dsn = "data/Philly", quiet = T)
# if you need to read in again:
philly_sf <- st_read(dsn = "../data/Philly", quiet = T)
# make a simple feature point with CRS
philly_ctr_sfc <- st_point(c(1750160, 467499.9)) %>% st_sfc(., crs = 102003)
philly_ctr_sfc
philly_sf
philly_sf %>% str
philly_ctr_sfc
philly_ctr_sfc %>% str
philly_ctr_sfc
philly_buf_sf <- st_buffer(philly_ctr_sfc, dist = 2000) #單位為meter
philly_buf_sf
plot(philly_buf_sf)
plot(philly_ctr_sfc)
philly_buf_intersects <- st_intersects(philly_buf_sf, philly_sf)
#> Error in st_geos_binop("intersects", x, y, sparse = sparse, prepared = prepared) :
#> st_crs(x) == st_crs(y) is not TRUE
st_crs(philly_sf)
st_crs(philly_buf_sf)
philly_buf_intersects
st_crs(philly_sf) <- 102003
st_crs(philly_sf)
class(philly_buf_intersects)
philly_buf_intersects <- st_intersects(philly_buf_sf, philly_sf)
class(philly_buf_intersects)
philly_buf_intersects
philly_buf_intersects %>% head
philly_buf_intersects
plot(philly_buf_intersects)
philly_buf_intersects
philly_buf_intersects[[1]]
philly_sel_sf <- philly_sf[philly_buf_intersects[[1]], ]
philly_sel_sf <- philly_sf[philly_buf_intersects[[1]], ]
# plot
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add=T, col="red")
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add=T, col="red")
st_geometry(philly_sel_sf)
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add = T, col = "red")
plot(st_geometry(philly_buf_sf), add = T, lwd = 2, lty = 2)
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add = T, col = "red")
plot(st_geometry(philly_buf_sf), add = T, lwd = 2, lty = 2, col = "green")
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add = T, col = "red")
plot(st_geometry(philly_buf_sf), add = T, lwd = 2, lty = 2, col = "green", alpha = 0.5)
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add = T, col = "red")
plot(st_geometry(philly_buf_sf), add = T, lwd = 2, lty = 2, col = "green", alpha = 0.2)
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add = T, col = "red")
plot(st_geometry(philly_buf_sf), add = T, lwd = 2, lty = 2, col = alpha("green", 0.2))
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add = T, col = "red")
plot(st_geometry(philly_buf_sf), add = T, lwd = 2, lty = 2, col = "green", alpha = 0)
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add = T, col = "red")
plot(st_geometry(philly_buf_sf), add = T, lwd = 2, lty = 2, col = "green", alpha = 0.8)
# plot
library(scales)
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add = T, col = "red")
plot(st_geometry(philly_buf_sf), add = T, lwd = 2, lty = 2, col = alpha("green", 0.2))
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add = T, col = "red")
plot(st_geometry(philly_buf_sf), add = T, lwd = 2, lty = 2, col = alpha("green", 0.5))
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add = T, col = "red")
plot(st_geometry(philly_buf_sf), add = T, lwd = 2, lty = 2,
col = scales::alpha("green", 0.5))
library(rgeos)
# if you need to read it in again
# verbose: report progress
philly_sp <- readOGR(dsn = "../data/Philly",
layer = "PhillyTotalPopHHinc",
verbose = F)
# if you need to read it in again
# verbose: report progress
philly_sp <- readOGR(dsn = "../data/Philly",
layer = "PhillyTotalPopHHinc",
verbose = T)
coords <- data.frame(x = 1750160, y = 467499.9) # set the coordinates
prj <- CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs") # the projection string for AEA
philly_ctr_sp <- SpatialPoints(coords, proj4string = prj) # create the spatialPoints
philly_ctr_sp %>% str
philly_buf_sp <- gBuffer(spgeom = philly_ctr_sp, width=2000) # create buffer around center
plot(philly_ctr_sp)
plot(philly_buf_sp)
philly_buf_sp %>% str
philly_buf_intersects <-  gIntersects(spgeom1 = philly_buf_sp,
spgeom2 = philly_sp,
byid=TRUE)
# what kind of object is this?
class(philly_buf_intersects)
philly_buf_intersects
philly_buf_intersects %>% dim
# subset
philly_sel_sp <- philly_sp[as.vector(philly_buf_intersects),]
plot (philly_sp, border="#aaaaaa")
plot (philly_sel_sp, add=T, col="red")
plot (philly_buf_sp, add=T, lwd = 2)
plot (philly_sp, border = "#aaaaaa")
plot (philly_sel_sp, add = T, col = "red")
plot (philly_buf_sp, add = T, lwd = 2, col = scales::alpha("green", 0.2))
plot (philly_sp, border = "#aaaaaa")
plot (philly_sel_sp, add = T, col = "red")
plot (philly_buf_sp, add = T, lwd = 2, col = scales::alpha("green", 0.5))
#If you need to read the file back in:
philly_homicides_sf <- st_read(dsn = "../data/PhillyHomicides")
st_crs(philly_sf)
st_crs(philly_homicides_sf)
#If you need to read the file back in:
philly_homicides_sf <- st_read(dsn = "../data/PhillyHomicides")
st_crs(philly_homicides_sf)
st_crs(philly_sf)
#If you need to read the file back in:
# philly_homicides_sf <- st_read(dsn = "../data/PhillyHomicides")
st_crs(philly_homicides_sf)
st_crs(philly_sf)
st_crs(philly_sf)
philly_homicides_sf_aea <- st_transform(x = philly_homicides_sf,
crs = st_crs(philly_sf))
st_crs(philly_homicides_sf_aea)
st_crs(philly_sf)
st_coordinates(philly_homicides_sf) %>% range()
st_coordinates(philly_homicides_sf_aea) %>% range()
par(mfrow=c(1,2))
plot(st_geometry(philly_homicides_sf), axes=TRUE, main = "before transform - latlon")
plot(st_geometry(philly_homicides_sf_aea), axes=TRUE, main = "after transform - aea")
rm(list = ls()); invisible(gc())
library(knitr)
library(sf)
library(sp)
library(rgdal)
library(raster)
library(rgeos)
library(dplyr)
opts_chunk$set(echo = TRUE)
ln1 <- matrix(runif(6), ncol=2) %>% Line()
str(ln1); ln1
ln2 <- Line(matrix(runif(6), ncol=2))
lns1 <- Lines(list(ln1), ID = c("hwy1"))
lns2 <- Lines(list(ln2), ID = c("hwy2"))
str(lns1)
sp_lns <- SpatialLines(list(lns1, lns2))
str(sp_lns)
# ---
sp_lns@bbox #會是所有line(即lines)的 x,y 之最大最小值。
ln1@coords[,1] %>% range
ln1@coords[,2] %>% range
ln2@coords[,1] %>% range
ln2@coords[,2] %>% range
dfr <- data.frame(id = c("hwy1", "hwy2"), # note how we use the same IDs from above!
cars_per_hour = c(78, 22))
sp_lns_dfr <- SpatialLinesDataFrame(sp_lns, dfr, match.ID = "id")
str(sp_lns_dfr)
lnstr_sfg1 <- st_linestring(matrix(runif(6), ncol = 2))
lnstr_sfg2 <- st_linestring(matrix(runif(6), ncol = 2))
class(lnstr_sfg1)
lnstr_sfg1 %>% str
lnstr_sfg1
lnstr_sfc <- st_sfc(lnstr_sfg1, lnstr_sfg2) # just one feature here
lnstr_sfc
lnstr_sf <- st_sf(dfr , lnstr_sfc)
lnstr_sf
methods(class="sf")
philly_homicides_df <- read.csv("../data/philly_homicides.csv")
str(philly_homicides_df )
philly_homicides_sf <- st_as_sf(philly_homicides_df, coords = c("POINT_X", "POINT_Y"))
str(philly_homicides_sf)
philly_homicides_sf$geometry
st_crs(philly_homicides_sf)
st_crs(philly_homicides_sf) <- 4326 # we can use EPSG as numeric here
st_crs(philly_homicides_sf)
# st_write(philly_homicides_sf, "../data/PhillyHomicides", driver = "ESRI Shapefile")
# to force the save:
st_write(philly_homicides_sf, "../data/PhillyHomicides", driver = "ESRI Shapefile",
delete_layer = TRUE)
class(philly_homicides_df)
coordinates(philly_homicides_df) <- c("POINT_X", "POINT_Y")
class(philly_homicides_df) #!!被轉換成 SpatialPointsDataFrame 惹~
is.projected(philly_homicides_df) # see if a projection is defined
proj4string(philly_homicides_df) <- CRS("+init=epsg:4326") # this is WGS84
is.projected(philly_homicides_df) # voila! hm. wait a minute..
philly_homicides_df %>% str
# to save out using writeOGR from rgdal
library(rgdal)
# note that we need to save the philly_homicides_df, which we converted to sp object!
# writeOGR(obj = philly_homicides_df,
#          dsn = "../data/PhillyHomicides",
#          layer = "PhillyHomicides", driver = "ESRI Shapefile")
# to force save:
writeOGR(obj = philly_homicides_df,
dsn = "../data/PhillyHomicides",
layer = "PhillyHomicides",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
# read in
philly_sf <- st_read("../data/Philly")
philly_sf %>% str
plot(philly_sf)
philly_sf %>% st_geometry() %>% plot
# subset the familar way
philly_sf_rich <- philly_sf[philly_sf$medHHinc > 60000, ]
# or
philly_sf_rich <- subset(philly_sf, medHHinc > 60000)
# ---
# 下面兩行一起執行
philly_sf %>% st_geometry() %>% plot
plot(st_geometry(philly_sf_rich), add = T, col = "red")
philly_sf %>% st_geometry() %>% plot
philly_sf %>%
filter(medHHinc > 60000) %>%
st_geometry() %>%
plot(col = "red", add = T)
library(rgdal)
philly_sp <- readOGR(dsn = "../data/Philly", layer = "PhillyTotalPopHHinc")
class(philly_sp)
plot(philly_sp)
philly_sp_rich <- subset(philly_sp, medHHinc > 60000)
plot(philly_sp_rich, add = T, col = "red")
library(raster)
r <- raster(xmn=-0.5, ymn=-0.5, xmx=4.5, ymx=4.5, resolution = c(1,1))
r
class(r)
r <- setValues(x = r, values = runif(25))
class(r)
r
coordinates(r) #coordinate會是grid的中心~
plot(r); points(coordinates(r), pch = 3)
class(volcano)
volcano %>% dim
volcano.r <- raster(x = volcano)
class(volcano.r)
# plot(volcano.r)
library(raster)
HARV <- raster("../data/HARV_RGB_Ortho.tif")
# 注意 band: 1  (of  3  bands)
HARV
plot(HARV)
crs(HARV)
methods(class = class(HARV))
hist(HARV)
ncell(HARV)
hist(HARV, maxpixels = ncell(HARV))
GDALinfo("../data/HARV_RGB_Ortho.tif")
nlayers(HARV) # 1，因為指讀取一個band
nbands(HARV) # 應該是用這個看有多少個 band 才對。
HARV_Band2 <- raster("../data/HARV_RGB_Ortho.tif", band = 2)
plot(HARV_Band2)
HARV_stack <- stack("../data/HARV_RGB_Ortho.tif")
# how many layers?
nlayers(HARV_stack) #3
# nbands(HARV_stack) #會是error。not implemented for RasterStack objects
HARV_stack
plot(HARV_stack)
plotRGB(HARV_stack)
object.size(HARV_stack)
HARV_brick <- brick(HARV_stack)
object.size(HARV_brick)
# specify the grid topology with the following parameters:
# - the smallest coordinates for each dimension, here: 0,0
# - cell size in each dimension, here: 1,1
# - number of cells in each dimension, here: 5,5
gtopo <- GridTopology(cellcentre.offset = c(0,0),
cellsize = c(1,1),
cells.dim = c(5,5)) # create the grid
datafr <- data.frame(runif(25)) # make up some data
SpGdf <- SpatialGridDataFrame(grid = gtopo, data = datafr) # create the grid data frame
summary(SpGdf)
coordinates(SpGdf) #coordinate會是grid的中心~
plot(SpGdf); points(coordinates(SpGdf), pch = 3)
ph_edu <- read.csv("../data/PhillyEducation.csv")
names(ph_edu)
## sf ##
# if you need to read in again:
# philly_sf <- st_read("../data/Philly")
names(philly_sf)
philly_sf_merged <- merge(x = philly_sf, y = ph_edu,
by.x = "GEOID10", by.y = "GEOID")
names(philly_sf_merged)
## sp ##
# if you need to read in again:
philly_sp <- readOGR(dsn = "../data/Philly", layer = "PhillyTotalPopHHinc")
# this is sp::merge()
philly_sp_merged <- sp::merge(philly_sp, ph_edu, by.x = "GEOID10", by.y = "GEOID")
names(philly_sp_merged) # no geometry column here
## How about:
# 1. Get the census tract polygons.
# 2. Find the Philadelphia city center coordinates.
# 3. Create a buffer around the city center point.
# 4. Select all census tract polygons that intersect with the center buffer
# if you need to read in again:
philly_sf <- st_read(dsn = "../data/Philly", quiet = T)
# philly_sf %>% str
# make a simple feature point with CRS
philly_ctr_sfc <- st_point(c(1750160, 467499.9)) %>% st_sfc(., crs = 102003)
philly_ctr_sfc
# plot(philly_ctr_sfc)
philly_buf_sf <- st_buffer(philly_ctr_sfc, dist = 2000) #單位為meter
philly_buf_sf
# plot(philly_buf_sf)
philly_buf_intersects <- st_intersects(philly_buf_sf, philly_sf)
#> Error in st_geos_binop("intersects", x, y, sparse = sparse, prepared = prepared) :
#> st_crs(x) == st_crs(y) is not TRUE
st_crs(philly_sf)
st_crs(philly_buf_sf)
st_crs(philly_sf) <- 102003
st_crs(philly_sf)
philly_buf_intersects <- st_intersects(philly_buf_sf, philly_sf)
class(philly_buf_intersects)
philly_buf_intersects
philly_buf_intersects[[1]]
philly_sel_sf <- philly_sf[philly_buf_intersects[[1]], ]
# plot
plot(st_geometry(philly_sf),
border = "#aaaaaa", #灰色
main = "Census tracts that fall within 2km of city center")
plot(st_geometry(philly_sel_sf), add = T, col = "red")
plot(st_geometry(philly_buf_sf), add = T, lwd = 2, lty = 2,
col = scales::alpha("green", 0.5))
library(rgeos)
# if you need to read it in again
# verbose: report progress
philly_sp <- readOGR(dsn = "../data/Philly",
layer = "PhillyTotalPopHHinc",
verbose = T)
coords <- data.frame(x = 1750160, y = 467499.9) # set the coordinates
prj <- CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs") # the projection string for AEA
philly_ctr_sp <- SpatialPoints(coords, proj4string = prj) # create the spatialPoints
philly_ctr_sp %>% str
# plot(philly_ctr_sp)
philly_buf_sp <- gBuffer(spgeom = philly_ctr_sp, width=2000) # create buffer around center
# 單位為meter
# ---
# plot(philly_buf_sp)
philly_buf_sp %>% str
philly_buf_intersects <-  gIntersects(spgeom1 = philly_buf_sp,
spgeom2 = philly_sp,
byid=TRUE)
# what kind of object is this?
# matrix
class(philly_buf_intersects)
# philly_buf_intersects %>% dim #384 1
# subset
philly_sel_sp <- philly_sp[as.vector(philly_buf_intersects),]
# plot
plot (philly_sp, border = "#aaaaaa")
plot (philly_sel_sp, add = T, col = "red")
plot (philly_buf_sp, add = T, lwd = 2, col = scales::alpha("green", 0.5))
#If you need to read the file back in:
# philly_homicides_sf <- st_read(dsn = "../data/PhillyHomicides")
st_crs(philly_homicides_sf)
st_crs(philly_sf)
st_crs(philly_sf)
philly_homicides_sf_aea <- st_transform(x = philly_homicides_sf,
crs = st_crs(philly_sf))
st_crs(philly_homicides_sf_aea)
st_crs(philly_sf)
st_coordinates(philly_homicides_sf) %>% range()
st_coordinates(philly_homicides_sf_aea) %>% range()
par(mfrow=c(1,2))
plot(st_geometry(philly_homicides_sf), axes=TRUE, main = "before transform - latlon")
plot(st_geometry(philly_homicides_sf_aea), axes=TRUE, main = "after transform - aea")
st_write(obj = philly_homicides_sf_aea,
dsn = "../data/PhillyHomicides_aea",
driver = "ESRI Shapefile",
delete_layer = T)
philly_homicides_sp <- readOGR(dsn = "../data/PhillyHomicides",
layer = "PhillyHomicides")
proj4string(philly_sp)
proj4string(philly_homicides_sp)
philly_homicides_sp_aea <- spTransform(philly_homicides_sp, CRS(proj4string(philly_sp)))
## check the coordinates ##
range(coordinates(philly_homicides_sp_aea))
range(coordinates(philly_homicides_sp))
## write out
writeOGR(obj = philly_homicides_sp_aea,
dsn = "../data/PhillyHomicides_aea",
layer = "PhillyHomicides_aea",
driver = "ESRI Shapefile",
overwrite_layer = T)
# if you need to load again:
HARV <- raster("../data/HARV_RGB_Ortho.tif")
crs(HARV)
HARV_WGS84 <- projectRaster(HARV, crs = "+init=epsg:4326")
extent(HARV)
extent(HARV_WGS84)
ncell(HARV)
ncell(HARV_WGS84)
plot(HARV, main = "before transform - UTM")
plot(HARV_WGS84, main = "after transform - WGS84")
# ---
# 地理訊息
# philly_sf <- st_read(dsn = "../data/Philly", quiet = T)
# ---
# 犯罪數據
# philly_homicides_sf <- st_read(dsn = "../data/PhillyHomicides")
# philly_homicides_sf_aea <- st_transform(x = philly_homicides_sf,
#                                         crs = st_crs(philly_sf))
# 其實原本就有 Shape_area
# 新計算的 tract_area，其實差不多。單位 sqare meter。
philly_sf %>% head()
# ---
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
head()
philly_homicides_sf_aea %>% head
philly_homicides_sf_aea %>% dim
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(philly_homicides_sf_aea) %>%
head()
# 原始版本的 unique 會出錯，因為 tract_area 計算出來的面積大小可能有誤差。
# 雖然結果顯示 homic_rate 為[1/m^2]，但實際上我們已經轉換為[1/km^2]
crime_rate <- philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(philly_homicides_sf_aea) %>%
group_by(GEOID10) %>%
summarize(n_homic = n(),
tract_area = tract_area[1],
homic_rate = n_homic/tract_area * 1e6)
plot(crime_rate)
plot(crime_rate[, "homic_rate"])
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
driver = "ESRI Shapefile")
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
driver = "ESRI Shapefile", delete_layer = T)
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
driver = "ESRI Shapefile", delete_layer = T, quiet = T)
